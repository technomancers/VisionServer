buildscript{
    ext.kotlin_version = "1.1.4-3"
    repositories {
        maven {
            url "https://plugins.gradle.org/m2"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

group 'Technomancers'
version '1.0-SNAPSHOT'

ext.networktable_verion = "3.1.7"
ext.opencv_version = "3.1.0"
ext.cscore_version = "1.0.2"

/*
You must clean before building as you may get the wrong native libraries in the zip.
 */

/*
BuildTypes

use -PbuildType=

windows
linux
arm-raspbian
arm
armhf
 */

/*
NTServer

use -PntServer=

For debugging purposes please specify which server a Network Tables server is on.
 */


def projectName = 'VisionServer'
if (!project.hasProperty("buildType")) {
    ext.buildType = "arm-raspbian"
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'application'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

apply from: "dependencies.gradle"

repositories {
    mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

configurations {
    nativeBundle
}

dependencies {
    compile ntcoreDep()
    compile cscoreDep()
    compile "org.opencv:opencv-java:${opencv_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlin_version}"
    nativeBundle opencvJNIDep()
}

mainClassName = 'edu.frc.technomancers.VisionServer.MainKt'

jar {
    baseName = projectName
}

applicationDefaultJvmArgs.push('-Djava.library.path=MY_APP_HOME/native')
if (project.hasProperty("ntServer")) {
    applicationDefaultJvmArgs.push("-Dnetworktable.server=${ntServer}")
}

task extractNative(type: Copy) {
    from zipTree(configurations.nativeBundle.singleFile)
    into "$buildDir/nativeLibs"
}

applicationDistribution.from(extractNative) {
    exclude "META-INF"
    exclude "**/MANIFEST.MF"
    into 'native/'
}

applicationDistribution.from("$rootDir/LICENSE")

distZip.dependsOn extractNative
distTar.dependsOn extractNative
run.dependsOn extractNative

run {
    doFirst {
        applicationDefaultJvmArgs.push("-Djava.library.path=$buildDir/nativeLibs")
    }
}

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%APP_HOME%')
    }
}